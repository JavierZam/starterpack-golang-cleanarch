# Google Cloud Build configuration for CI/CD pipeline
# This pipeline builds, tests, lints, runs migrations, and deploys the Go backend application.

steps:
  # 1. Build Go Application
  - name: 'gcr.io/cloud-builders/go'
    id: 'Build Application'
    args: ['build', '-o', 'main', './cmd/server']
    env: ['CGO_ENABLED=0'] # Build static binary

  # 2. Run Tests
  - name: 'gcr.io/cloud-builders/go'
    id: 'Run Tests'
    args: ['test', './...']
    env: ['CGO_ENABLED=0']

  # 3. Run Linters
  - name: 'golangci/golangci-lint:v1.55.1' # Use a specific linter image
    id: 'Run Linters'
    entrypoint: 'golangci-lint'
    args: ['run', './...']

  # 4. Database Migrations (using golang-migrate CLI)
  # This step runs migrations on the target database before deploying the new application version.
  # Secrets are now available via the 'availableSecrets' block.
  - name: 'alpine/git' # Use a simple image with curl/tar/git
    id: 'Run Migrations'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Download and install migrate CLI
        apk add --no-cache curl tar
        curl -L https://github.com/golang-migrate/migrate/releases/download/v4.16.2/migrate.linux-amd64.tar.gz | tar xvz
        mv migrate /usr/local/bin/migrate
        chmod +x /usr/local/bin/migrate

        # Construct database URL from environment variables provided by availableSecrets
        # Note: $$ is used to escape $ for shell, so it's interpreted as literal $ by migrate
        DB_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable"
        
        # Run migrations up
        /usr/local/bin/migrate -path ./migrations -database "$$DB_URL" up
    # No 'env' or 'secretEnv' needed here, as secrets are globally available via availableSecrets.

  # 5. Build and Push Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build and Push Docker Image'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/starterpack-golang-cleanarch:$COMMIT_SHA', '.']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker Image'
    args: ['push', 'gcr.io/$PROJECT_ID/starterpack-golang-cleanarch:$COMMIT_SHA']

  # 6. Deploy to Cloud Run
  # Secrets are passed as environment variables to Cloud Run, using values from availableSecrets.
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to Cloud Run'
    args:
      - 'run'
      - 'deploy'
      - 'starterpack-golang-cleanarch' # Service name
      - '--image=gcr.io/$PROJECT_ID/starterpack-golang-cleanarch:$COMMIT_SHA'
      - '--region=asia-southeast2' # Ganti dengan region yang sesuai (misal: asia-southeast2 untuk Jakarta)
      - '--platform=managed'
      - '--allow-unauthenticated' # Hapus ini jika Anda ingin layanan menjadi private
      - '--set-env-vars=APP_ENV=production' # Set production environment variable
      # Pass secrets as environment variables to the Cloud Run service
      - '--set-env-vars=JWT_SECRET=${JWT_SECRET}'
      - '--set-env-vars=DB_HOST=${DB_HOST},DB_PORT=${DB_PORT},DB_USER=${DB_USER},DB_NAME=${DB_NAME},DB_PASSWORD=${DB_PASSWORD}'
    # No 'secretEnv' needed here, as secrets are globally available via availableSecrets.

# Images to be pushed to Artifact Registry (or GCR)
images:
  - 'gcr.io/$PROJECT_ID/starterpack-golang-cleanarch:$COMMIT_SHA'

# --- NEW BLOCK: options ---
# This block configures global build options, including logging behavior.
options:
  logging: CLOUD_LOGGING_ONLY # Directs build logs to Cloud Logging only.

# --- NEW BLOCK: availableSecrets ---
# This block defines secrets from Secret Manager that will be available as environment variables
# to ALL steps in the build.
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_NUMBER}/secrets/db-password-prod/versions/latest
    env: 'DB_PASSWORD'
  - versionName: projects/${PROJECT_NUMBER}/secrets/jwt-secret-prod/versions/latest
    env: 'JWT_SECRET'
  - versionName: projects/${PROJECT_NUMBER}/secrets/db-host-prod/versions/latest
    env: 'DB_HOST'
  - versionName: projects/${PROJECT_NUMBER}/secrets/db-user-prod/versions/latest
    env: 'DB_USER'
  - versionName: projects/${PROJECT_NUMBER}/secrets/db-name-prod/versions/latest
    env: 'DB_NAME'
